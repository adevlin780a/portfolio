[{"categories":null,"contents":"Context Visier is a leading people analytics platform that empowers organizations to make data-driven decisions about their workforce. The platform offers extensive features for data integration, analytics, and visualization. As part of the documentation team, I was tasked with enhancing the clarity, usability, and accessibility of Visier\u0026rsquo;s developer documentation.\nProblem Users, particularly developers and administrators, often faced challenges in navigating the complex documentation due to its dense technical language and lack of clear examples. This led to increased support queries and a steeper learning curve for new users.\nContribution I collaborated with subject matter experts to rewrite and restructure key sections of the developer documentation, focusing on the embedded user persona. My contributions included:\nSimplifying technical jargon to make content more accessible.\nAdding practical examples and use cases to illustrate concepts.\nImplementing consistent formatting and navigation to enhance readability.\nEnsuring alignment with Visier\u0026rsquo;s style guide for consistency across documentation.\nThese updates were applied to various sections of the documentaiton where developers may need more clarity in thier process and approach to using Visier.\nImpact User feedback reflected greater satisfaction with the clarity and usefulness of the documentation. The updates also streamlined the onboarding process for new users and improved the depth and clarity of more technically complex features, helping users realize value from the platform more quickly.\nLinks Visier Documentation\n","permalink":"http://localhost:1313/portfolio/projects/creations/software-documentation/","tags":null,"title":"Software Documentation"},{"categories":null,"contents":"Context Problem Contribution Impact Links ","permalink":"http://localhost:1313/portfolio/publications/software-documentation/","tags":null,"title":"Software Documentation"},{"categories":null,"contents":"Addressed pretty significant page load performance issue founde in larger deployments. Eliminates uses of intensive backend query, replacing it with an asynchronous API call against a lucene index. This change reduces page load from from 2+ minutes to nearly instant, with an incredibly responsive UI.\n","permalink":"http://localhost:1313/portfolio/projects/contributions/deploy-triggers/","tags":["Java","jQuery","REST APIs","Bamboo","JSON"],"title":"Atlassian Deployment Triggers"},{"categories":null,"contents":"Context Problem Contribution Impact Links ","permalink":"http://localhost:1313/portfolio/publications/api/","tags":null,"title":"API Documentation"},{"categories":null,"contents":"Context The ActiveState Platform API lets developers automate runtime builds, manage projects, and integrate directly with the platform’s backend. When I joined the documentation effort, the existing material was minimal and highly technical, which made it difficult for new users to get started.\nProblem The main challenge was clarity. Developers often struggled with authentication, query syntax, and understanding how REST and GraphQL requests fit together. There were also gaps in examples users could see endpoints, but not how to apply them in real-world workflows.\nContribution I reorganized the documentation around user goals rather than system components. I rewrote sections to explain concepts like authentication and API tokens in plain language, and added example requests and responses to show practical use cases.\nI also worked closely with developers to verify endpoint details, clarify data models, and make sure the documentation matched current API behavior. This led to the creation of a automatically generated API reference page where developers could quickly find and leverage existing APIs.\nImpact After the update, the API docs became easier to navigate and more actionable. Users could successfully authenticate and make their first API calls without needing internal support. The new structure also reduced confusion between REST and GraphQL endpoints, helping developers integrate with the platform more confidently and efficiently.\nLinks ActiveState API documentation home ActiveState API reference page ","permalink":"http://localhost:1313/portfolio/projects/creations/api/","tags":null,"title":"API Documentation"},{"categories":null,"contents":"Context Problem Contribution Impact Links ","permalink":"http://localhost:1313/portfolio/publications/release-notes/","tags":null,"title":"Release Notes"},{"categories":null,"contents":"Shields.io is a massive library of badges that can be inserted into project README\u0026rsquo;s or websites displaying various statuses (code coverage, health, version, etc). Support for docker was missing the current build health, and was a pretty trivial addition.\n","permalink":"http://localhost:1313/portfolio/projects/contributions/shields-docker/","tags":["Docker","Rest APIs","JavaScript","node.js","JSON"],"title":"Added Docker Build Status Badge to shields.io"},{"categories":null,"contents":"Context Visier maintains public release notes in their embedded documentation. The primary audience is users (often technical or admin users) who want to see what new features, fixes, or enhancements have been introduced in recent product releases. The page is organized by years and seasons (e.g. Summer, Winter) and links to more detailed notes for each period.\nProblem Publishing release notes keeps users informed of changes, helps them adopt new features, reduces support requests, and builds trust by clearly documenting updates over time.\nContribution I helped make the release notes clearer and more user-focused by writing feature descriptions to explain not just what changed, but why it matters. To improve usability, I added links from key items to related documentation, allowing users to find details quickly without extra searching.\nImpact The release notes are now easier to scan and more relevant to each audience. Developers can quickly find updates that affect their work, reducing confusion and support requests. The polished, consistent format also builds trust in the documentation and makes future updates simpler to maintain.\nLinks Visier Release Notes\n","permalink":"http://localhost:1313/portfolio/projects/creations/release-notes/","tags":null,"title":"Release Notes"},{"categories":null,"contents":"Context As a technical writer at ActiveState, I was tasked with creating a clear and concise guide to help developers quickly set up and start using the ActiveState Platform. This guide serves as an introductory resource for users new to the platform.\nProblem New users often face challenges in understanding how to begin using the ActiveState Platform, leading to confusion and potential disengagement. Things like creating an account and building a runtime were common friction points for new users. And interacting with the command line interface of the State Tool was not clearly described during onboarding. There was a need for a straightforward, step-by-step guide to facilitate a smooth onboarding experience.\nContribution I developed a structured guide that outlines the essential steps for getting started with the ActiveState Platform. Each section is designed to be beginner-friendly, with clear instructions and links to additional resources for further assistance. A troubleshooting section was added, comprised of the most common problems users encountered according to a poll done by our support team.\nI also contributed to creating a brief onbaording video, collaborating with members of the Product and Engineering teams to draft and record a script outlining the onboarding process.\nImpact The guide has significantly improved the onboarding experience for new users, providing them with the necessary tools and knowledge to get started with the ActiveState Platform efficiently. Feedback indicates a reduction in support queries related to initial setup, suggesting that users find the guide helpful and easy to follow.\nLinks Getting started with ActiveState\n","permalink":"http://localhost:1313/portfolio/projects/creations/user-guides-manuals/","tags":null,"title":"User Guides"},{"categories":null,"contents":"This talk looked at Liberty Mutual’s transformation to Continuous Integration, Continuous Delivery, and DevOps. For a large, heavily regulated industry, this task can not only be daunting, but viewed by many as impossible. Often, organizations try to reduce the friction through micro-fixes, but Eddie’s team asked how to change the culture to reduce the friction and concluded with the following final points:\nDon’t mandate DevOps. Give employees the chance to master their discipline with examples to set and follow. Favor deep end-to-end accomplishments over broad but incremental steps forward. Focus on taking the right teams far before encouraging broad adoption. Centralize the platforms and tools that your teams shouldn’t be thinking about. Provide foundational services/commodities and let teams stay on purpose. Incorporate contributions from everyone; don’t stifle autonomy. Stay open to new ways of working. Challenge security policies, but respect intentions. Find new ways to enforce concerns without abandoning precaution. ","permalink":"http://localhost:1313/portfolio/projects/creations/alldaydevops-copy/","tags":["DevOps","Continuous Integration","Continuous Delivery","CI/CD pipelines","agile","Culture"],"title":"Organically DevOps: Building Quality and Security into the Software Supply Chain at Liberty Mutual"},{"categories":null,"contents":"This talk looked at Liberty Mutual’s transformation to Continuous Integration, Continuous Delivery, and DevOps. For a large, heavily regulated industry, this task can not only be daunting, but viewed by many as impossible. Often, organizations try to reduce the friction through micro-fixes, but Eddie’s team asked how to change the culture to reduce the friction and concluded with the following final points:\nDon’t mandate DevOps. Give employees the chance to master their discipline with examples to set and follow. Favor deep end-to-end accomplishments over broad but incremental steps forward. Focus on taking the right teams far before encouraging broad adoption. Centralize the platforms and tools that your teams shouldn’t be thinking about. Provide foundational services/commodities and let teams stay on purpose. Incorporate contributions from everyone; don’t stifle autonomy. Stay open to new ways of working. Challenge security policies, but respect intentions. Find new ways to enforce concerns without abandoning precaution. ","permalink":"http://localhost:1313/portfolio/publications/alldaydevops-copy/","tags":["DevOps","Continuous Integration","Continuous Delivery","CI/CD pipelines","agile","Culture"],"title":"Organically DevOps: Building Quality and Security into the Software Supply Chain at Liberty Mutual"},{"categories":null,"contents":"While adding Structured Data to a client\u0026rsquo;s website I found some example JSON that was invalid. Simple contribution to cleanup the user documentation providing syntactically valid JSON documents.\n","permalink":"http://localhost:1313/portfolio/projects/contributions/schema-org/","tags":["JSON"],"title":"Schema.org Structured Data documentation fixes"},{"categories":null,"contents":"Intro Doesn\u0026rsquo;t matter whether it\u0026rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.\nFirst it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty \u0026lsquo;man in the middle\u0026quot; attack. Finally it gives your site that touch of class\u0026hellip;. which of course a classy person like yourself relies on. Once you implement SSL certificates on your server you\u0026rsquo;ll want to require secure connections using Apache\u0026rsquo;s rewrite module. Now I won\u0026rsquo;t dwell on the creation and signing of certificates, its already well documented. If your just starting out though,heres a few links I recommend;\nCreating self-signed certificates (free, but should only be used internally or for testing, users will; see an \u0026lsquo;Untrusted\u0026quot; warning) Requesting a CA Signed certificate (not free, but the final certificate is trusted and seamless for users) The second link uses the schools internal CA, you will need to pay a public CA like Entrust or Verisign. All of this information is aimed at \u0026rsquo;nix or solaris servers running apache. Why? cause a production windows server is laughable :-p\nNow that you have a certificate, whats next? So there you are you have a shiny new Certificate and Server key, how do you force visitors to your apache driven site to use the SSL? You copied the certificates into the appropite locations right? And you have made the needed changes in httpd.conf right? So now when you view https://example.com you see a \u0026rsquo;trusted\u0026rsquo; warning or your site right? If No to any of these than this article does a pretty good job of outlining those steps.\nThe SSL Works, How do I force connections to use it? First you need to decide if you want to force every page on your site to use SSL, or only a particular sub-domain, or maybe just your admin directory. Since the overhead is minimal there is no harm is forcing the entire domain to leverage SSL, but if it is a self-signed certificate for your personal use than you\u0026rsquo;ll most certainly want to restrict its use to your own areas. This prevents users from seeing that nasty warning \u0026ldquo;This server is not trusted\u0026rdquo; You\u0026rsquo;ll know if your using SSL because the url prefix changes from http to https (s for secure).\nForcing entire domain to use SSL You want any visit, any where to use ssl. This probably the simplest solution. Create or append to your htaccess file in the top directory of your server. Some people use a port check (80 is typically http, while 443 is https) but if you have alernate configs or the user just adds :8080 to the end of the url this method is useless. Instead check whether the https environmental variable is set, if not then redirect.\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{SERVER_NAME}$1 \\[R,L\\] Forcing sub-domains to use SSL Maybe you only want mysecretarea.example.com to use SSL, that\u0026rsquo;s easy enough. Its the same premise as above, but you move the htaccess file into the directory that corresponds to the subdomain. Also change the second line like below;\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://mysecretarea.%{SERVER_NAME}$1 \\[R,L\\] Forcing a directory to use SSL This method cn get a little hairier if your using aliases or redirects on top of this one. You\u0026rsquo;ll need to consider what order the commands are read. The basic principle is like so. You want all visits to example.com/admin to use ssl. Create a htaccess file in the parent directory. Again will check for the https variable, but this time we also check for the sub-directory to be in the path.\nRewriteCond %{HTTPS} !=on RewriteRule ^/admin/(.*)$ https://%{SERVER_NAME}/admin/$1 \\[R,L\\] ","permalink":"http://localhost:1313/portfolio/blog/force-ssl/","tags":["apache","apache","redirect","rewrite","ssl","web development"],"title":"Forcing Visits to use SSL"}]